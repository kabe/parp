#!/usr/bin/env python

import re


class Loader(object):
    """NM disassemble result loader.
    """

    def _set_filename(self, value):
        self._filename = value

    def _get_filename(self):
        return self._filename

    filename = property(_get_filename, _set_filename)

    def _set_func_a_table(self, value):
        self._func_a_table = value

    def _get_func_a_table(self):
        return self._func_a_table

    func_a_table = property(_get_func_a_table, _set_func_a_table)

    def _set_func_ptr_table(self, value):
        self._func_ptr_table = value

    def _get_func_ptr_table(self):
        return self._func_ptr_table

    func_ptr_table = property(_get_func_ptr_table, _set_func_ptr_table)

    def __init__(self, filename):
        """Constructor.

        @param filename Filename from `nm filename`
        """
        self._filename = filename
        self.func_a_table = dict()
        self.func_ptr_table = dict()

    def load_all(self, ):
        """Load the file.
        """
        f = open(self.filename)
        [self.add_func(line.rstrip()) for line in f]
        f.close()

    def add_func(self, line):
        """Add a function to self.functable.

        @param line
        """
        r = re.compile("(?P<faddr>[^ ]+)? +(?P<type>\w) (?P<fname>[^ ]+)")
        m = r.match(line)
        funcname = m.group("fname")
        funcaddr = m.group("faddr")
        if funcaddr is not None:
            addr = int(funcaddr, 16)
            self.func_a_table[funcname] = addr
            self.func_ptr_table[str(addr)] = funcname

if __name__ == '__main__':
    # map file is generated by:
    # nm solver_mpi_tau_pdt > solver_mpi_tau_pdt.map
    loader = Loader("testcase/solver_mpi_tau_pdt.map")
    loader.load_all()
    print loader.func_a_table["main"]
    print loader.func_ptr_table["4321413"]
